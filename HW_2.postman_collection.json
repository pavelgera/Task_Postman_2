{
	"info": {
		"_postman_id": "8ef096c0-ebb3-4271-a014-85eef094ef80",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//3. Проверить, что в body приходит правильный string.",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body('This is the first responce from server!');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first\n",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//Спарсить response body в json.",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)",
							"let responseData = pm.response.json();",
							"pm.test(\"<<Name>>\", function () {",
							"    let responceData = pm.response.json();",
							"    pm.expect(responceData.name).to.eql('pavel');",
							"});",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)",
							"pm.test(\"<<Age>>\", function () {",
							"    let responceData = pm.response.json();",
							"    pm.expect(responceData.age).to.eql('35');",
							"});",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"<<Salary>>\", function () {",
							"    let responceData = pm.response.json();",
							"    pm.expect(responceData.salary).to.eql(3000);",
							"});",
							"//Проверить, что name в ответе равно name s",
							"//request (name забрать из request.)",
							"let requestData = request.data;",
							"pm.test(\"name = <<Name>>\", function () {",
							"pm.expect(responseData.name).to.eql(requestData.name);",
							"});",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"age = <<Age>>\", function () {",
							"pm.expect(responseData.age).to.eql(requestData.age);",
							"});",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"salary = <<Salary>>\", function () {",
							"pm.expect(responseData.salary).to.eql(+requestData.salary);",
							"});",
							"//Вывести в консоль параметр family из response.",
							"pm.test(\"<<Family>>\", function () {",
							"    let jsonData = pm.response.json();",
							"console.log(jsonData.family)",
							"});",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"u_salary_1_5_year = <<Salary>> * 4\", function () {",
							"pm.expect(responseData.family.u_salary_1_5_year).to.eql(+requestData.salary * 4);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "name",
							"value": "pavel",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3\n",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3\n"
					]
				}
			},
			"response": []
		},
		{
			"name": "3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"let responseData = pm.response.json();\r",
							"//Спарсить request.\r",
							"let requestData = pm.request.url.query.toObject();\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"check name\", function () {\r",
							"    pm.expect(responseData.name).to.eql(requestData.name);\r",
							"});\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"check age\", function () {\r",
							"    pm.expect(responseData.age).to.eql(requestData.age);\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"check salary\", function () {\r",
							"    pm.expect(responseData.salary).to.eql(+requestData.salary);\r",
							"});\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(responseData.family);\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog have name\", function () {\r",
							"    pm.expect(responseData.family.pets['dog']).to.have.property('name');\r",
							"});\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog have age\", function () {\r",
							"    pm.expect(responseData.family.pets['dog']).to.have.property('age');\r",
							"});\r",
							"//Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"Dog's name Luky\", function () {\r",
							"    pm.expect(responseData.family.pets['dog'].name).to.eql('Luky');\r",
							"});\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog's age 4\", function () {\r",
							"    pm.expect(responseData.family.pets['dog'].age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3\n?name=pavel&age=35&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3\n"
					],
					"query": [
						{
							"key": "name",
							"value": "pavel"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							" let responseData = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							" let requestData = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"check name\", function () {\r",
							"    pm.expect(responseData.name).to.eql(requestData.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"check age\", function () {\r",
							"    pm.expect(responseData.age).to.eql(+requestData.age);\r",
							"}); \r",
							"\r",
							"console.log(responseData.salary); /*Вывести в консоль параметр salary из request.*/\r",
							"console.log(requestData.salary);  /*Вывести в консоль параметр salary из response.*/\r",
							"console.log(responseData.salary[0]); /*Вывести в консоль 0-й элемент параметра salary из response.*/\r",
							"console.log(responseData.salary[1]); /*Вывести в консоль 1-й элемент параметра salary параметр salary из response.*/\r",
							"console.log(responseData.salary[2]); /*Вывести в консоль 2-й элемент параметра salary параметр salary из response.*/\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check_0\", function () {\r",
							"    pm.expect(responseData.salary[0]).to.eql(+requestData.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check_1\", function () {\r",
							"    pm.expect(+responseData.salary[1]).to.eql(+requestData.salary*2);\r",
							"});  \r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check_2\", function () {\r",
							"    pm.expect(+responseData.salary[2]).to.eql(+requestData.salary*3);\r",
							"console.log()\r",
							"});\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for(i = 0; i < (Object.keys(responseData.salary).length); i++){\r",
							"    console.log(responseData.salary[i])\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?age=35&name=pavel&salary=3000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "name",
							"value": "pavel"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" //Статус код 200\r",
							" pm.test(\"Status code is 200\", function () {\r",
							" pm.response.to.have.status(200);\r",
							" });\r",
							"\r",
							" //Спарсить response body в json.\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"let requestData = request.data;\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"To_have => start_qa_salary \", function () {\r",
							"    pm.expect(responseData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"To_have => qa_salary_after_6_months \", function () {\r",
							"    pm.expect(responseData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"To_have => qa_salary_after_12_months \", function () {\r",
							"    pm.expect(responseData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"To_have => qa_salary_after_1.5_year \", function () {\r",
							"    pm.expect(responseData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"To_have => qa_salary_after_3.5_years \", function () {\r",
							"    pm.expect(responseData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"To_have => person \", function () {\r",
							"    pm.expect(responseData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check_0\", function () {\r",
							"    pm.expect(responseData.start_qa_salary).to.eql(+requestData.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check_1\", function () {\r",
							"    pm.expect(responseData. qa_salary_after_6_months).to.eql(+requestData.salary*2);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\r",
							"pm.test(\"Check_2\", function () {\r",
							"    pm.expect(responseData.qa_salary_after_12_months).to.eql(+requestData.salary*2.7);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check_3\", function () {\r",
							"    pm.expect(responseData['qa_salary_after_1.5_year']).to.eql(+requestData.salary*3.3);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"pm.test(\"Check_4\", function () {\r",
							"    pm.expect(responseData['qa_salary_after_3.5_years']).to.eql(+requestData.salary*3.8);\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request\r",
							"pm.test(\"Check_u_name = salary_req\", function () {\r",
							"    pm.expect(responseData.person.u_name[1]).to.eql(+requestData.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check_u_age = age_req\", function () {\r",
							"    pm.expect(responseData.person.u_age).to.eql(+requestData.age);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check_u_salary_5_years = salary_req*4.2\", function () {\r",
							"    pm.expect(responseData.person.u_salary_5_years).to.eql(+requestData.salary*4.2);\r",
							"});\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for(i = 0; i < (Object.keys(responseData.person).length); i++){\r",
							"    console.log(responseData.person[Object.keys(responseData.person)[i]])\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "name",
							"value": "pavel",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}